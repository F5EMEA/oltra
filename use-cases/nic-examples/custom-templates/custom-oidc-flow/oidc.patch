diff -urN ../../../../setup/nginx-ic/nginx-plus/ingress-class-plus.yaml nginx-ic/nginx-plus/ingress-class-plus.yaml
--- ../../../../setup/nginx-ic/nginx-plus/ingress-class-plus.yaml	2022-10-04 14:15:09.299339031 +0000
+++ nginx-ic/nginx-plus/ingress-class-plus.yaml	2022-10-05 13:26:22.635349918 +0000
@@ -1,11 +1,11 @@
 apiVersion: networking.k8s.io/v1
 kind: IngressClass
 metadata:
-  name: nginx-plus
+  name: nginx-plus-oidc
   annotations:
     ingressclass.kubernetes.io/is-default-class: "true"
 spec:
   controller: nginx.org/ingress-controller
   parameters:
     kind: IngressParameters
-    name: nginx-plus
\ No newline at end of file
+    name: nginx-plus-oidc
diff -urN ../../../../setup/nginx-ic/nginx-plus/nginx-plus.yaml nginx-ic/nginx-plus/nginx-plus.yaml
--- ../../../../setup/nginx-ic/nginx-plus/nginx-plus.yaml	2022-10-04 14:15:09.299339031 +0000
+++ nginx-ic/nginx-plus/nginx-plus.yaml	2022-10-05 13:26:22.635349918 +0000
@@ -1,17 +1,17 @@
 apiVersion: apps/v1
 kind: Deployment
 metadata:
-  name: nginx-plus
-  namespace: nginx
+  name: nginx-plus-oidc
+  namespace: nginx-oidc
 spec:
   replicas: 1
   selector:
     matchLabels:
-      app: nginx-plus
+      app: nginx-plus-oidc
   template:
     metadata:
       labels:
-        app: nginx-plus
+        app: nginx-plus-oidc
       annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "9113"
@@ -23,7 +23,7 @@
       containers:
       - image: private-registry.nginx.com/nginx-ic-nap-dos/nginx-plus-ingress:2.3.1
         imagePullPolicy: IfNotPresent
-        name: nginx-plus
+        name: nginx-plus-oidc
         ports:
         - name: http
           containerPort: 80
@@ -61,9 +61,8 @@
           - -nginx-plus
           - -nginx-configmaps=$(POD_NAMESPACE)/nginx-config
           - -default-server-tls-secret=$(POD_NAMESPACE)/default-server-secret
-          - -ingress-class=nginx-plus
-          - -enable-app-protect
-          - -enable-app-protect-dos
+          - -ingress-class=nginx-plus-oidc
+          - -enable-oidc
          #- -v=3 # Enables extensive logging. Useful for troubleshooting.
           - -report-ingress-status
           - -nginx-status-allow-cidrs=10.0.0.0/8
diff -urN ../../../../setup/nginx-ic/nginx-plus/svc-plus.yaml nginx-ic/nginx-plus/svc-plus.yaml
--- ../../../../setup/nginx-ic/nginx-plus/svc-plus.yaml	2022-10-04 14:15:09.299339031 +0000
+++ nginx-ic/nginx-plus/svc-plus.yaml	1970-01-01 00:00:00.000000000 +0000
@@ -1,25 +0,0 @@
-apiVersion: v1
-kind: Service
-metadata:
-  name: nginx-plus
-  namespace: nginx
-spec:
-  type: NodePort 
-  ports:
-  - port: 80
-    targetPort: 80
-    nodePort: 30080
-    protocol: TCP
-    name: http
-  - port: 443
-    targetPort: 443
-    nodePort: 30443
-    protocol: TCP
-    name: https
-  - port: 8080
-    targetPort: 8080
-    nodePort: 30880
-    protocol: TCP
-    name: dashboard
-  selector:
-    app: nginx-plus
diff -urN ../../../../setup/nginx-ic/rbac/ap-rbac.yaml nginx-ic/rbac/ap-rbac.yaml
--- ../../../../setup/nginx-ic/rbac/ap-rbac.yaml	2022-10-04 14:15:09.303339031 +0000
+++ nginx-ic/rbac/ap-rbac.yaml	2022-10-05 13:26:22.635349918 +0000
@@ -17,11 +17,11 @@
 kind: ClusterRoleBinding
 apiVersion: rbac.authorization.k8s.io/v1
 metadata:
-  name: nginx-ingress-app-protect
+  name: nginx-ingress-app-protect-oidc
 subjects:
 - kind: ServiceAccount
   name: nginx-ingress
-  namespace: nginx
+  namespace: nginx-oidc
 roleRef:
   kind: ClusterRole
   name: nginx-ingress-app-protect
diff -urN ../../../../setup/nginx-ic/rbac/apdos-rbac.yaml nginx-ic/rbac/apdos-rbac.yaml
--- ../../../../setup/nginx-ic/rbac/apdos-rbac.yaml	2022-10-04 14:15:09.303339031 +0000
+++ nginx-ic/rbac/apdos-rbac.yaml	2022-10-05 13:26:22.635349918 +0000
@@ -17,11 +17,11 @@
 kind: ClusterRoleBinding
 apiVersion: rbac.authorization.k8s.io/v1
 metadata:
-  name: nginx-ingress-app-protect-dos
+  name: nginx-ingress-app-protect-dos-oidc
 subjects:
   - kind: ServiceAccount
     name: nginx-ingress
-    namespace: nginx
+    namespace: nginx-oidc
 roleRef:
   kind: ClusterRole
   name: nginx-ingress-app-protect-dos
diff -urN ../../../../setup/nginx-ic/rbac/ns-and-sa.yaml nginx-ic/rbac/ns-and-sa.yaml
--- ../../../../setup/nginx-ic/rbac/ns-and-sa.yaml	2022-10-04 14:15:09.303339031 +0000
+++ nginx-ic/rbac/ns-and-sa.yaml	2022-10-05 13:26:22.635349918 +0000
@@ -1,10 +1,10 @@
 apiVersion: v1
 kind: Namespace
 metadata:
-  name: nginx 
+  name: nginx-oidc
 ---
 apiVersion: v1
 kind: ServiceAccount
 metadata:
   name: nginx-ingress 
-  namespace: nginx
\ No newline at end of file
+  namespace: nginx-oidc
diff -urN ../../../../setup/nginx-ic/rbac/rbac.yaml nginx-ic/rbac/rbac.yaml
--- ../../../../setup/nginx-ic/rbac/rbac.yaml	2022-10-04 14:15:09.303339031 +0000
+++ nginx-ic/rbac/rbac.yaml	2022-10-05 13:26:22.635349918 +0000
@@ -127,11 +127,11 @@
 kind: ClusterRoleBinding
 apiVersion: rbac.authorization.k8s.io/v1
 metadata:
-  name: nginx-ingress
+  name: nginx-ingress-oidc
 subjects:
 - kind: ServiceAccount
   name: nginx-ingress
-  namespace: nginx
+  namespace: nginx-oidc
 roleRef:
   kind: ClusterRole
   name: nginx-ingress
diff -urN ../../../../setup/nginx-ic/resources/default-server-secret.yaml nginx-ic/resources/default-server-secret.yaml
--- ../../../../setup/nginx-ic/resources/default-server-secret.yaml	2022-10-04 14:15:09.303339031 +0000
+++ nginx-ic/resources/default-server-secret.yaml	2022-10-05 13:26:22.635349918 +0000
@@ -2,7 +2,7 @@
 kind: Secret
 metadata:
   name: default-server-secret
-  namespace: nginx
+  namespace: nginx-oidc
 type: kubernetes.io/tls
 data:
   tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2akNDQWFZQ0NRREFPRjl0THNhWFhEQU5CZ2txaGtpRzl3MEJBUXNGQURBaE1SOHdIUVlEVlFRRERCWk8KUjBsT1dFbHVaM0psYzNORGIyNTBjbTlzYkdWeU1CNFhEVEU0TURreE1qRTRNRE16TlZvWERUSXpNRGt4TVRFNApNRE16TlZvd0lURWZNQjBHQTFVRUF3d1dUa2RKVGxoSmJtZHlaWE56UTI5dWRISnZiR3hsY2pDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwvN2hIUEtFWGRMdjNyaUM3QlBrMTNpWkt5eTlyQ08KR2xZUXYyK2EzUDF0azIrS3YwVGF5aGRCbDRrcnNUcTZzZm8vWUk1Y2Vhbkw4WGM3U1pyQkVRYm9EN2REbWs1Qgo4eDZLS2xHWU5IWlg0Rm5UZ0VPaStlM2ptTFFxRlBSY1kzVnNPazFFeUZBL0JnWlJVbkNHZUtGeERSN0tQdGhyCmtqSXVuektURXUyaDU4Tlp0S21ScUJHdDEwcTNRYzhZT3ExM2FnbmovUWRjc0ZYYTJnMjB1K1lYZDdoZ3krZksKWk4vVUkxQUQ0YzZyM1lma1ZWUmVHd1lxQVp1WXN2V0RKbW1GNWRwdEMzN011cDBPRUxVTExSakZJOTZXNXIwSAo1TmdPc25NWFJNV1hYVlpiNWRxT3R0SmRtS3FhZ25TZ1JQQVpQN2MwQjFQU2FqYzZjNGZRVXpNQ0F3RUFBVEFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWpLb2tRdGRPcEsrTzhibWVPc3lySmdJSXJycVFVY2ZOUitjb0hZVUoKdGhrYnhITFMzR3VBTWI5dm15VExPY2xxeC9aYzJPblEwMEJCLzlTb0swcitFZ1U2UlVrRWtWcitTTFA3NTdUWgozZWI4dmdPdEduMS9ienM3bzNBaS9kclkrcUI5Q2k1S3lPc3FHTG1US2xFaUtOYkcyR1ZyTWxjS0ZYQU80YTY3Cklnc1hzYktNbTQwV1U3cG9mcGltU1ZmaXFSdkV5YmN3N0NYODF6cFErUyt1eHRYK2VBZ3V0NHh3VlI5d2IyVXYKelhuZk9HbWhWNThDd1dIQnNKa0kxNXhaa2VUWXdSN0diaEFMSkZUUkk3dkhvQXprTWIzbjAxQjQyWjNrN3RXNQpJUDFmTlpIOFUvOWxiUHNoT21FRFZkdjF5ZytVRVJxbStGSis2R0oxeFJGcGZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
diff -urN ../../../../setup/nginx-ic/resources/nginx-config.yaml nginx-ic/resources/nginx-config.yaml
--- ../../../../setup/nginx-ic/resources/nginx-config.yaml	2022-10-04 14:15:09.303339031 +0000
+++ nginx-ic/resources/nginx-config.yaml	2022-10-05 13:27:25.635271327 +0000
@@ -2,10 +2,608 @@
 apiVersion: v1
 metadata:
   name: nginx-config
-  namespace: nginx
+  namespace: nginx-oidc
 data:
   allow-snippet-annotations: 'true'
   worker-connections: "10000"
   worker-rlimit-nofile: "10240"
   keepalive: "100"
-  keepalive-requests: "100000000"
\ No newline at end of file
+  keepalive-requests: "100000000"
+  resolver-addresses: "10.240.128.10"
+  virtualserver-template: |
+    {{ range $u := .Upstreams }}
+    upstream {{ $u.Name }} {
+        zone {{ $u.Name }} {{ if ne $u.UpstreamZoneSize "0" }}{{ $u.UpstreamZoneSize }}{{ else }}512k{{ end }};
+    
+        {{ if $u.LBMethod }}{{ $u.LBMethod }};{{ end }}
+    
+        {{ range $s := $u.Servers }}
+        server {{ $s.Address }} max_fails={{ $u.MaxFails }} fail_timeout={{ $u.FailTimeout }}{{ if $u.SlowStart }} slow_start={{ $u.SlowStart }}{{ end }} max_conns={{ $u.MaxConns }}{{ if $u.Resolve }} resolve{{ end }};
+        {{ end }}
+    
+        {{ if $u.Keepalive }}
+        keepalive {{ $u.Keepalive }};
+        {{ end }}
+    
+        {{ if $u.Queue }}
+        queue {{ $u.Queue.Size }} timeout={{ $u.Queue.Timeout }};
+        {{ end }}
+    
+        {{ with $u.SessionCookie }}
+            {{ if .Enable }}
+        sticky cookie {{ .Name }}{{ if .Expires }} expires={{ .Expires }}{{ end }}{{ if .Domain }} domain={{ .Domain }}{{ end }}{{ if .HTTPOnly }} httponly{{ end }}{{ if .Secure }} secure{{ end }}{{ if .Path }} path={{ .Path }}{{ end }};
+            {{ end }}
+        {{ end }}
+    
+        {{ if $u.NTLM }}ntlm;{{ end }}
+    }
+    {{ end }}
+    
+    {{ range $sc := .SplitClients }}
+    split_clients {{ $sc.Source }} {{ $sc.Variable }} {
+        {{ range $d := $sc.Distributions }}
+        {{ $d.Weight }} {{ $d.Value }};
+        {{ end }}
+    }
+    {{ end }}
+    
+    {{ range $m := .Maps }}
+    map {{ $m.Source }} {{ $m.Variable }} {
+        {{ range $p := $m.Parameters }}
+        {{ $p.Value }} {{ $p.Result }};
+        {{ end }}
+    }
+    {{ end }}
+    
+    {{ range $snippet := .HTTPSnippets }}
+    {{- $snippet }}
+    {{ end }}
+    
+    {{ range $z := .LimitReqZones }}
+    limit_req_zone {{ $z.Key }} zone={{ $z.ZoneName }}:{{ $z.ZoneSize }} rate={{ $z.Rate }};
+    {{ end }}
+    
+    {{ range $m := .StatusMatches }}
+    match {{ $m.Name }} {
+        status {{ $m.Code }};
+    }
+    {{ end }}
+    
+    {{ $s := .Server }}
+
+    {{ with $oidc := $s.OIDC }}
+    map $session_jwt $do_oidc_auth {
+      default   "";
+      ""        "off";
+    }
+    {{ end }}
+
+    server {
+        listen 80{{ if $s.ProxyProtocol }} proxy_protocol{{ end }};
+        listen [::]:80{{ if $s.ProxyProtocol }} proxy_protocol{{ end }};
+    
+        server_name {{ $s.ServerName }};
+        status_zone {{ $s.StatusZone }};
+        set $resource_type "virtualserver";
+        set $resource_name "{{$s.VSName}}";
+        set $resource_namespace "{{$s.VSNamespace}}";
+    
+        {{ with $oidc := $s.OIDC }}
+        include oidc/oidc.conf;
+
+        set $oidc_pkce_enable 0;
+        set $oidc_logout_redirect "/_logout";
+        set $oidc_hmac_key "{{ $s.VSName }}";
+        set $zone_sync_leeway {{ $oidc.ZoneSyncLeeway }};
+    
+        set $oidc_authz_endpoint "{{ $oidc.AuthEndpoint }}";
+        set $oidc_token_endpoint "{{ $oidc.TokenEndpoint }}";
+        set $oidc_jwt_keyfile "{{ $oidc.JwksURI }}";
+        set $oidc_scopes "{{ $oidc.Scope }}";
+        set $oidc_client "{{ $oidc.ClientID }}";
+        set $oidc_client_secret "{{ $oidc.ClientSecret }}";
+        set $redir_location "{{ $oidc.RedirectURI }}";
+
+        {{ end }}
+    
+        {{ with $ssl := $s.SSL }}
+            {{ if $s.TLSPassthrough }}
+        listen unix:/var/lib/nginx/passthrough-https.sock{{ if $ssl.HTTP2 }} http2{{ end }} proxy_protocol;
+        set_real_ip_from unix:;
+        real_ip_header proxy_protocol;
+            {{ else }}
+        listen 443 ssl{{ if $ssl.HTTP2 }} http2{{ end }}{{ if $s.ProxyProtocol }} proxy_protocol{{ end }};
+        listen [::]:443 ssl{{ if $ssl.HTTP2 }} http2{{ end }}{{ if $s.ProxyProtocol }} proxy_protocol{{ end }};
+            {{ end }}
+    
+            {{ if $ssl.RejectHandshake }}
+        ssl_reject_handshake on;
+            {{ else }}
+        ssl_certificate {{ $ssl.Certificate }};
+        ssl_certificate_key {{ $ssl.CertificateKey }};
+            {{ end }}
+        {{ end }}
+    
+        {{ with $s.IngressMTLS }}
+        ssl_client_certificate {{ .ClientCert }};
+        ssl_verify_client {{ .VerifyClient }};
+        ssl_verify_depth {{ .VerifyDepth }};
+        {{ end }}
+    
+        {{ with $s.TLSRedirect }}
+        if ({{ .BasedOn }} = 'http') {
+            return {{ .Code }} https://$host$request_uri;
+        }
+        {{ end }}
+    
+        server_tokens "{{ $s.ServerTokens }}";
+    
+        {{ range $setRealIPFrom := $s.SetRealIPFrom }}
+        set_real_ip_from {{ $setRealIPFrom }};
+        {{ end }}
+        {{ if $s.RealIPHeader }}
+        real_ip_header {{ $s.RealIPHeader }};
+        {{ end }}
+        {{ if $s.RealIPRecursive }}
+        real_ip_recursive on;
+        {{ end }}
+    
+        {{ with $s.PoliciesErrorReturn }}
+        return {{ .Code }};
+        {{ end }}
+    
+        {{ range $allow := $s.Allow }}
+        allow {{ $allow }};
+        {{ end }}
+        {{ if gt (len $s.Allow) 0 }}
+        deny all;
+        {{ end }}
+    
+        {{ range $deny := $s.Deny }}
+        deny {{ $deny }};
+        {{ end }}
+        {{ if gt (len $s.Deny) 0 }}
+        allow all;
+        {{ end }}
+    
+        {{ if $s.LimitReqOptions.DryRun }}
+        limit_req_dry_run on;
+        {{ end }}
+    
+        {{ with $level := $s.LimitReqOptions.LogLevel }}
+        limit_req_log_level {{ $level }};
+        {{ end }}
+    
+        {{ with $code := $s.LimitReqOptions.RejectCode }}
+        limit_req_status {{ $code }};
+        {{ end }}
+    
+        {{ range $rl := $s.LimitReqs }}
+        limit_req zone={{ $rl.ZoneName }}{{ if $rl.Burst }} burst={{ $rl.Burst }}{{ end }}
+            {{ if $rl.Delay }} delay={{ $rl.Delay }}{{ end }}{{ if $rl.NoDelay }} nodelay{{ end }};
+        {{ end }}
+    
+        {{ with $s.JWTAuth }}
+        auth_jwt "{{ .Realm }}"{{ if .Token }} token={{ .Token }}{{ end }};
+        auth_jwt_key_file {{ .Secret }};
+        {{ end }}
+    
+        {{ with $s.BasicAuth }}
+        auth_basic {{ printf "%q" .Realm }};
+        auth_basic_user_file {{ .Secret }};
+        {{ end }}
+    
+        {{ with $s.EgressMTLS }}
+            {{ if .Certificate }}
+        proxy_ssl_certificate {{ .Certificate }};
+        proxy_ssl_certificate_key {{ .CertificateKey }};
+            {{ end }}
+            {{ if .TrustedCert }}
+        proxy_ssl_trusted_certificate {{ .TrustedCert }};
+            {{ end }}
+    
+        proxy_ssl_verify {{ if .VerifyServer }}on{{else}}off{{end}};
+        proxy_ssl_verify_depth {{ .VerifyDepth }};
+        proxy_ssl_protocols {{ .Protocols }};
+        proxy_ssl_ciphers {{ .Ciphers }};
+        proxy_ssl_session_reuse {{ if .SessionReuse }}on{{else}}off{{end}};
+        proxy_ssl_server_name {{ if .ServerName }}on{{else}}off{{end}};
+        proxy_ssl_name {{ .SSLName }};
+        {{ end }}
+    
+        {{ with $s.WAF }}
+        app_protect_enable {{ .Enable }};
+            {{ if .ApPolicy }}
+        app_protect_policy_file {{ .ApPolicy }};
+            {{ end }}
+    
+            {{ if .ApSecurityLogEnable }}
+        app_protect_security_log_enable on;
+            {{ range $logconf := .ApLogConf }}
+        app_protect_security_log {{ $logconf }};
+            {{ end }}
+            {{ end }}
+        {{ end }}
+    
+        {{- with $s.Dos }}
+        app_protect_dos_enable {{ .Enable }};
+            {{- if .Name }}
+        app_protect_dos_name "{{ .Name }}";
+            {{- end }}
+    
+            {{- if .ApDosPolicy }}
+        app_protect_dos_policy_file {{ .ApDosPolicy }};
+            {{- end }}
+    
+            {{- if .ApDosSecurityLogEnable }}
+        app_protect_dos_security_log_enable on;
+        app_protect_dos_security_log {{ .ApDosLogConf }};
+            {{- end }}
+    
+            {{- if .ApDosAccessLogDest }}
+        set $loggable '0';
+        # app-protect-dos module will set it to '1'  if a request doesn't pass the rate limit
+        access_log {{ .ApDosAccessLogDest }} log_dos if=$loggable;
+            {{- end }}
+    
+            {{- if .ApDosMonitorURI }}
+                {{- if or .ApDosMonitorProtocol .ApDosMonitorTimeout}}
+        app_protect_dos_monitor uri={{ .ApDosMonitorURI }}{{if .ApDosMonitorProtocol}} protocol={{.ApDosMonitorProtocol}}{{end}}{{if .ApDosMonitorTimeout}} timeout={{.ApDosMonitorTimeout}}{{end}};
+                {{- else}}
+        app_protect_dos_monitor "{{ .ApDosMonitorURI }}";
+                {{- end}}
+            {{- end}}
+    
+        {{- end }}
+    
+        {{ range $snippet := $s.Snippets }}
+        {{- $snippet }}
+        {{ end }}
+    
+        {{ range $l := $s.InternalRedirectLocations }}
+        location {{ $l.Path }} {
+            rewrite ^ {{ $l.Destination }} last;
+        }
+        {{ end }}
+    
+        {{ range $hc := $s.HealthChecks }}
+        location @hc-{{ $hc.Name }} {
+            {{ $proxyOrGRPC := "proxy" }}{{ if $hc.GRPCPass }}{{ $proxyOrGRPC = "grpc" }}{{ end }}
+            {{ range $n, $v := $hc.Headers }}
+            {{ $proxyOrGRPC }}_set_header {{ $n }} "{{ $v }}";
+            {{ end }}
+            {{ $proxyOrGRPC }}_connect_timeout {{ $hc.ProxyConnectTimeout }};
+            {{ $proxyOrGRPC }}_read_timeout {{ $hc.ProxyReadTimeout }};
+            {{ $proxyOrGRPC }}_send_timeout {{ $hc.ProxySendTimeout }};
+                {{ if $hc.GRPCPass }}
+            grpc_pass {{ $hc.GRPCPass }};
+                {{ else }}
+            proxy_pass {{ $hc.ProxyPass }};
+                {{ end }}
+            health_check {{ if $hc.URI }}uri={{ $hc.URI }} {{ end }}{{ if $hc.Port }}port={{ $hc.Port }} {{ end }}interval={{ $hc.Interval }} jitter={{ $hc.Jitter }}
+                fails={{ $hc.Fails }} passes={{ $hc.Passes }}{{ if $hc.Match }} match={{ $hc.Match }}{{ end }}
+                {{ if $hc.Mandatory }} mandatory{{ if $hc.Persistent }} persistent{{ end }}{{ end }}
+                {{ if $hc.GRPCPass }} type=grpc{{ if $hc.GRPCStatus }} grpc_status={{ $hc.GRPCStatus }}{{ end }}
+                {{ if $hc.GRPCService }} grpc_service={{ $hc.GRPCService }}{{ end }}{{ end }};
+        }
+        {{ end }}
+    
+        {{ range $e := $s.ErrorPageLocations }}
+        location {{ $e.Name }} {
+            {{ if $e.DefaultType }}
+            default_type "{{ $e.DefaultType }}";
+            {{ end }}
+            {{ range $h := $e.Headers }}
+            add_header {{ $h.Name }} "{{ $h.Value }}" always;
+            {{ end }}
+            # status code is ignored here, using 0
+            return 0 "{{ $e.Return.Text }}";
+        }
+        {{ end }}
+    
+        {{ range $l := $s.ReturnLocations }}
+        location {{ $l.Name }} {
+            default_type "{{ $l.DefaultType }}";
+            # status code is ignored here, using 0
+            return 0 "{{ $l.Return.Text }}";
+        }
+        {{ end }}
+    
+        {{ range $l := $s.Locations }}
+        location {{ $l.Path }} {
+            set $service "{{ $l.ServiceName }}";
+            {{ if $l.IsVSR }}
+            set $resource_type "virtualserverroute";
+            set $resource_name "{{ $l.VSRName }}";
+            set $resource_namespace "{{ $l.VSRNamespace }}";
+            {{ end }}
+    
+            {{ if $l.Internal }}
+            internal;
+            {{ end }}
+            {{ range $snippet := $l.Snippets }}
+            {{- $snippet }}
+            {{ end }}
+    
+            {{ with $l.PoliciesErrorReturn }}
+            return {{ .Code }};
+            {{ end }}
+    
+            {{ range $allow := $l.Allow }}
+            allow {{ $allow }};
+            {{ end }}
+            {{ if gt (len $l.Allow) 0 }}
+            deny all;
+            {{ end }}
+    
+            {{ range $deny := $l.Deny }}
+            deny {{ $deny }};
+            {{ end }}
+            {{ if gt (len $l.Deny) 0 }}
+            allow all;
+            {{ end }}
+    
+            {{ if $l.LimitReqOptions.DryRun }}
+            limit_req_dry_run on;
+            {{ end }}
+    
+            {{ with $level := $l.LimitReqOptions.LogLevel }}
+            limit_req_log_level {{ $level }};
+            {{ end }}
+    
+            {{ with $code := $l.LimitReqOptions.RejectCode }}
+            limit_req_status {{ $code }};
+            {{ end }}
+    
+            {{ range $rl := $l.LimitReqs }}
+            limit_req zone={{ $rl.ZoneName }}{{ if $rl.Burst }} burst={{ $rl.Burst }}{{ end }}
+                {{ if $rl.Delay }} delay={{ $rl.Delay }}{{ end }}{{ if $rl.NoDelay }} nodelay{{ end }};
+            {{ end }}
+    
+            {{ with $l.JWTAuth }}
+            auth_jwt "{{ .Realm }}"{{ if .Token }} token={{ .Token }}{{ end }};
+            auth_jwt_key_file {{ .Secret }};
+            {{ end }}
+    
+            {{ with $l.BasicAuth }}
+            auth_basic {{ printf "%q" .Realm }};
+            auth_basic_user_file {{ .Secret }};
+            {{ end }}
+    
+            {{ $proxyOrGRPC := "proxy" }}{{ if $l.GRPCPass }}{{ $proxyOrGRPC = "grpc" }}{{ end }}
+    
+            {{ with $l.EgressMTLS }}
+                {{ if .Certificate }}
+            {{ $proxyOrGRPC }}_ssl_certificate {{ .Certificate }};
+            {{ $proxyOrGRPC }}_ssl_certificate_key {{ .CertificateKey }};
+                {{ end }}
+                {{ if .TrustedCert }}
+            {{ $proxyOrGRPC }}_ssl_trusted_certificate {{ .TrustedCert }};
+                {{ end }}
+    
+            {{ $proxyOrGRPC }}_ssl_verify {{ if .VerifyServer }}on{{else}}off{{end}};
+            {{ $proxyOrGRPC }}_ssl_verify_depth {{ .VerifyDepth }};
+            {{ $proxyOrGRPC }}_ssl_protocols {{ .Protocols }};
+            {{ $proxyOrGRPC }}_ssl_ciphers {{ .Ciphers }};
+            {{ $proxyOrGRPC }}_ssl_session_reuse {{ if .SessionReuse }}on{{else}}off{{end}};
+            {{ $proxyOrGRPC }}_ssl_server_name {{ if .ServerName }}on{{else}}off{{end}};
+            {{ $proxyOrGRPC }}_ssl_name {{ .SSLName }};
+            {{ end }}
+    
+            {{ if $l.OIDC }}
+            {{ $proxyOrGRPC }}_intercept_errors on;
+            error_page 401 = @do_oidc_flow;
+            auth_jwt_key_request /_jwks_uri;
+            auth_jwt $do_oidc_auth token=$session_jwt;
+            {{ $proxyOrGRPC }}_set_header username $jwt_claim_sub;
+            {{ $proxyOrGRPC }}_set_header jwtToken $session_jwt;
+            {{ end }}
+    
+            {{ with $l.WAF }}
+            app_protect_enable {{ .Enable }};
+                {{ if .ApPolicy }}
+            app_protect_policy_file {{ .ApPolicy }};
+                {{ end }}
+    
+                {{ if .ApSecurityLogEnable }}
+            app_protect_security_log_enable on;
+                {{ range $logconf := .ApLogConf }}
+            app_protect_security_log {{ $logconf }};
+                {{ end }}
+                {{ end }}
+            {{ end }}
+    
+                {{ if $l.GRPCPass }}
+            error_page 400 = @grpc_internal;
+            error_page 401 = @grpc_unauthenticated;
+            error_page 403 = @grpc_permission_denied;
+            error_page 404 = @grpc_unimplemented;
+            error_page 429 = @grpc_unavailable;
+            error_page 502 = @grpc_unavailable;
+            error_page 503 = @grpc_unavailable;
+            error_page 504 = @grpc_unavailable;
+            error_page 405 = @grpc_internal;
+            error_page 408 = @grpc_deadline_exceeded;
+            error_page 413 = @grpc_resource_exhausted;
+            error_page 414 = @grpc_resource_exhausted;
+            error_page 415 = @grpc_internal;
+            error_page 426 = @grpc_internal;
+            error_page 495 = @grpc_unauthenticated;
+            error_page 496 = @grpc_unauthenticated;
+            error_page 497 = @grpc_internal;
+            error_page 500 = @grpc_internal;
+            error_page 501 = @grpc_internal;
+                {{ end }}
+    
+            {{- with $l.Dos }}
+            app_protect_dos_enable {{ .Enable }};
+    
+                {{- if .Name }}
+            app_protect_dos_name "{{ .Name }}";
+                {{- end }}
+    
+                {{- if .ApDosPolicy }}
+            app_protect_dos_policy_file {{ .ApDosPolicy }};
+                {{- end }}
+    
+                {{ if .ApDosSecurityLogEnable }}
+            app_protect_dos_security_log_enable on;
+            app_protect_dos_security_log {{ .ApDosLogConf }};
+                {{ end }}
+                {{- if .ApDosAccessLogDest }}
+            set $loggable '0';
+            # app-protect-dos module will set it to '1'  if a request doesn't pass the rate limit
+            access_log {{ .ApDosAccessLogDest }} log_dos if=$loggable;
+                {{- end }}
+    
+                {{- if .ApDosMonitorURI }}
+                    {{- if or .ApDosMonitorProtocol .ApDosMonitorTimeout}}
+            app_protect_dos_monitor uri={{ .ApDosMonitorURI }}{{if .ApDosMonitorProtocol}} protocol={{.ApDosMonitorProtocol}}{{end}}{{if .ApDosMonitorTimeout}} timeout={{.ApDosMonitorTimeout}}{{end}};
+                    {{- else}}
+            app_protect_dos_monitor "{{ .ApDosMonitorURI }}";
+                    {{- end}}
+                {{- end}}
+            {{- end }}
+    
+            {{ range $e := $l.ErrorPages }}
+            error_page {{ $e.Codes }} {{ if ne 0 $e.ResponseCode }}={{ $e.ResponseCode }}{{ end }} "{{ $e.Name }}";
+            {{ end }}
+    
+            {{ if $l.ProxyInterceptErrors }}
+            {{ $proxyOrGRPC }}_intercept_errors on;
+            {{ end }}
+    
+            {{ if $l.InternalProxyPass }}
+            proxy_pass {{ $l.InternalProxyPass }};
+            {{ end }}
+    
+            {{ if or $l.ProxyPass $l.GRPCPass }}
+                {{ range $r := $l.Rewrites }}
+            rewrite {{ $r }};
+                {{ end }}
+            {{ $proxyOrGRPC }}_connect_timeout {{ $l.ProxyConnectTimeout }};
+            {{ $proxyOrGRPC }}_read_timeout {{ $l.ProxyReadTimeout }};
+            {{ $proxyOrGRPC }}_send_timeout {{ $l.ProxySendTimeout }};
+            client_max_body_size {{ $l.ClientMaxBodySize }};
+    
+                {{ if $l.ProxyMaxTempFileSize }}
+            proxy_max_temp_file_size {{ $l.ProxyMaxTempFileSize }};
+                {{ end }}
+    
+            proxy_buffering {{ if $l.ProxyBuffering }}on{{ else }}off{{ end }};
+                {{ if $l.ProxyBuffers }}
+            proxy_buffers {{ $l.ProxyBuffers }};
+                {{ end }}
+                {{ if $l.ProxyBufferSize }}
+            {{ $proxyOrGRPC }}_buffer_size {{ $l.ProxyBufferSize }};
+                {{ end }}
+    
+                {{ if not $l.GRPCPass }}
+            proxy_http_version 1.1;
+            set $default_connection_header {{ if $l.HasKeepalive }}""{{ else }}close{{ end }};
+            proxy_set_header Upgrade $http_upgrade;
+            proxy_set_header Connection $vs_connection_header;
+            proxy_pass_request_headers {{ if $l.ProxyPassRequestHeaders }}on{{ else }}off{{ end }};
+                {{ end }}
+            {{ $proxyOrGRPC }}_set_header X-Real-IP $remote_addr;
+            {{ $proxyOrGRPC }}_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
+            {{ $proxyOrGRPC }}_set_header X-Forwarded-Host $host;
+            {{ $proxyOrGRPC }}_set_header X-Forwarded-Port $server_port;
+            {{ $proxyOrGRPC }}_set_header X-Forwarded-Proto {{ with $s.TLSRedirect }}{{ .BasedOn }}{{ else }}$scheme{{ end }};
+                {{ range $h := $l.ProxySetHeaders }}
+            {{ $proxyOrGRPC }}_set_header {{ $h.Name }} "{{ $h.Value }}";
+                {{ end }}
+                {{ range $h := $l.ProxyHideHeaders }}
+            {{ $proxyOrGRPC }}_hide_header {{ $h }};
+                {{ end }}
+                {{ range $h := $l.ProxyPassHeaders }}
+            {{ $proxyOrGRPC }}_pass_header {{ $h }};
+                {{ end }}
+                {{ with $l.ProxyIgnoreHeaders }}
+            {{ $proxyOrGRPC }}_ignore_headers {{ $l.ProxyIgnoreHeaders }};
+                {{ end }}
+                {{ range $h := $l.AddHeaders }}
+            add_header {{ $h.Name }} "{{ $h.Value }}" {{ if $h.Always }}always{{ end }};
+                {{ end }}
+                {{ if $.SpiffeCerts }}
+            {{ $proxyOrGRPC }}_ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
+            {{ $proxyOrGRPC }}_ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
+            {{ $proxyOrGRPC }}_ssl_trusted_certificate /etc/nginx/secrets/spiffe_rootca.pem;
+            {{ $proxyOrGRPC }}_ssl_server_name on;
+            {{ $proxyOrGRPC }}_ssl_verify on;
+            {{ $proxyOrGRPC }}_ssl_verify_depth 25;
+            {{ $proxyOrGRPC }}_ssl_name {{ $l.ProxySSLName }};
+                {{ end }}
+                {{if $l.GRPCPass}}
+            grpc_pass {{ $l.GRPCPass }};
+                {{ else }}
+            proxy_pass {{ $l.ProxyPass }}{{ $l.ProxyPassRewrite }};
+                {{ end }}
+            {{ $proxyOrGRPC }}_next_upstream {{ $l.ProxyNextUpstream }};
+            {{ $proxyOrGRPC }}_next_upstream_timeout {{ $l.ProxyNextUpstreamTimeout }};
+            {{ $proxyOrGRPC }}_next_upstream_tries {{ $l.ProxyNextUpstreamTries }};
+            {{ end }}
+        }
+        {{ end }}
+    
+        {{ with $ssl := $s.SSL }}
+            {{ if $ssl.HTTP2 }}
+    	location @grpc_deadline_exceeded {
+            default_type application/grpc;
+            add_header content-type application/grpc;
+            add_header grpc-status 4;
+            add_header grpc-message 'deadline exceeded';
+            return 204;
+        }
+    
+        location @grpc_permission_denied {
+            default_type application/grpc;
+            add_header content-type application/grpc;
+            add_header grpc-status 7;
+            add_header grpc-message 'permission denied';
+            return 204;
+        }
+    
+        location @grpc_resource_exhausted {
+            default_type application/grpc;
+            add_header content-type application/grpc;
+            add_header grpc-status 8;
+            add_header grpc-message 'resource exhausted';
+            return 204;
+        }
+    
+        location @grpc_unimplemented {
+            default_type application/grpc;
+            add_header content-type application/grpc;
+            add_header grpc-status 12;
+            add_header grpc-message unimplemented;
+            return 204;
+        }
+    
+        location @grpc_internal {
+            default_type application/grpc;
+            add_header content-type application/grpc;
+            add_header grpc-status 13;
+            add_header grpc-message 'internal error';
+            return 204;
+        }
+    
+        location @grpc_unavailable {
+            default_type application/grpc;
+            add_header content-type application/grpc;
+            add_header grpc-status 14;
+            add_header grpc-message unavailable;
+            return 204;
+        }
+    
+        location @grpc_unauthenticated {
+            default_type application/grpc;
+            add_header content-type application/grpc;
+            add_header grpc-status 16;
+            add_header grpc-message unauthenticated;
+            return 204;
+        }
+    
+    	    {{ end }}
+        {{ end }}
+    }
