************  iRules  ****************
#when HTTP_REQUEST {
#    if { [HTTP::header exists "Host"]} {
#        HTTP::header replace "Host" "grafana.f5demo.local"
#    }
#}
**************************************

when HTTP_REQUEST {
    if { [HTTP::header exists "Host"]} {
        HTTP::header replace "Host" "prometheus.f5demo.local"
    }
}

**************************************


*************.  SETUP F5 event streaming ********************


curl -k --location --request POST 'https://10.1.1.5/mgmt/shared/appsvcs/declare' \
--header 'Content-Type: application/json' \
--header 'Authorization: Basic YWRtaW46Q0lTbGFiMTIz' \
--data-raw '{
    "class": "ADC",
    "schemaVersion": "3.0.0",
    "remark": "Example depicting creation of BIG-IP module log profiles",
    "Common": {
    	"class": "Tenant",
        "Shared": {
            "class": "Application",
            "template": "shared",
            "telemetry_local_rule": {
                "remark": "Only required when TS is a local listener",
                "class": "iRule",
                "iRule": "when CLIENT_ACCEPTED {\n  node 127.0.0.1 6514\n}"
            },
            "telemetry_local": {
                "remark": "Only required when TS is a local listener",
                "class": "Service_TCP",
                "virtualAddresses": [
                    "255.255.255.254"
                ],
                "virtualPort": 6514,
                "iRules": [
                    "telemetry_local_rule"
                ]
            },
            "telemetry": {
                "class": "Pool",
                "members": [
                    {
                        "enable": true,
                        "serverAddresses": [
                            "255.255.255.254"
                        ],
                        "servicePort": 6514
                    }
                ],
                "monitors": [
                    {
                        "bigip": "/Common/tcp"
                    }
                ]
            },
            "telemetry_hsl": {
                "class": "Log_Destination",
                "type": "remote-high-speed-log",
                "protocol": "tcp",
                "pool": {
                    "use": "telemetry"
                }
            },
            "telemetry_formatted": {
                "class": "Log_Destination",
                "type": "splunk",
                "forwardTo": {
                    "use": "telemetry_hsl"
                }
            },
            "telemetry_publisher": {
                "class": "Log_Publisher",
                "destinations": [
                    {
                        "use": "telemetry_formatted"
                    }
                ]
            },
            "telemetry_log_iRule": {
                "class": "iRule",
                 "iRule": "when CLIENT_ACCEPTED {\n    set client_ip [IP::client_addr] \n    set vip [IP::local_addr] \n    set vip_port [TCP::local_port] \n} \nwhen HTTP_REQUEST { \n    set http_host [HTTP::host] \n    set http_path [string range [HTTP::path] 0 400] \n    set http_method [HTTP::method] \n    if { [HTTP::header exists \"User-Agent\"] } { \n        set user_agent [string range [HTTP::header \"User-Agent\"] 0 200] \n    } else  \n    { \n        set user_agent \"Not-Available\" \n    }   \n    if { [HTTP::header exists \"Referer\"] } { \n        set referer [string range [HTTP::header \"Referer\"] 0 200] \n    } else  \n    { \n        set referer \"Not-Available\" \n    } \n    set tcp_start_time [clock clicks -milliseconds] \n    set pool_name [LB::server pool] \n    set event_timestamp  [clock format [clock seconds] -format \"%Y/%m/%d %H:%M:%S\"] \n} \nwhen HTTP_RESPONSE { \n    set node [IP::server_addr] \n    set node_port [TCP::server_port] \n    set http_status [HTTP::status] \n    set response_time [expr {[clock clicks -milliseconds] - $tcp_start_time}] \n    set hsl [HSL::open -proto TCP -pool /Common/Shared/telemetry] \n    set event_source \"HTTP_logging\" \n    HSL::send $hsl \"event_source=\\\"$event_source\\\",event_timestamp=\\\"$event_timestamp\\\",client_ip=\\\"$client_ip\\\",vip=\\\"$vip\\\",vip_port=\\\"$vip_port\\\",http_method=\\\"$http_method\\\",http_host=\\\"$http_host\\\",http_path=\\\"$http_path\\\",user_agent=\\\"$user_agent\\\",referer=\\\"$referer\\\",pool_name=\\\"$pool_name\\\",node=\\\"$node\\\",node_port=\\\"$node_port\\\",http_status=\\\"$http_status\\\",response_time=\\\"$response_time\\\"\r\n\"  \n} \n"
            }
        }
    }
}'






*************.  SETUP Telemetry streaming ********************


curl -k --location --request POST 'https://10.1.1.5/mgmt/shared/telemetry/declare' \
--header 'Authorization: Basic YWRtaW46Q0lTbGFiMTIz' \
--header 'Content-Type: application/json' \
--data-raw '{
    "class": "Telemetry",
    "controls": {
        "class": "Controls",
        "logLevel": "debug",
        "debug": true
    },
    "Events": {
        "class": "Telemetry_Namespace",
        "My_Listener": {
            "class": "Telemetry_Listener",
            "port": 6514,
            "trace": true
        },
        "Elastic": { 
            "class": "Telemetry_Consumer",
            "type": "ElasticSearch",
            "host": "10.1.1.7",
            "protocol": "http",
            "port": "9200",
            "apiVersion": "7.15",
            "dataType": "_doc",
            "index": "eventdata",
            "enable": true
        }
    },
    "Stats": {
        "class": "Telemetry_Namespace",
        "My_Poller": {
            "class": "Telemetry_System_Poller",
            "interval": 0,
            "actions": [
            ]
        },
        "Prometheus": {
            "class": "Telemetry_Pull_Consumer",
            "type": "Prometheus",
            "systemPoller": [
                "My_Poller"
            ]
        }
    }
}'